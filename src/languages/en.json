{
  "navigation": {
    "home": "Home",
    "kana": "Kana",
    "sudoku": "Sudoku",
    "about": "About",
    "toggle": "Toggle dark mode"
  },
  "home": {
    "intro_title": "About me",
    "intro_text": "I'm Nick Hummel, I have a passion for coding and solving problems. I am a creative, abstract and theoretical thinker and have the ability to turn ideas into solutions. I have extensive development experience with .NET technology and NodeJS be it either MVC or RESTful, I can also find my way around in Java, Scala and PHP. For frontend development I specialize in React with Typescript and also have some experience with Angular, but I find it easy to adapt to any other framework."
  },
  "kana": {
    "intro_title": "Kana learning tool",
    "intro_text": "Before I left to Tokyo for an internship, I wanted at least to be able to read some of the basic Japanese characters. After a bit of research, I found that Hiragana and Katakana would be the easiest to learn. Sadly, I couldn't find any tools that could help me in the exact way as I wanted, which is by repeating them so often that you can't forget them even if you wanted to.",
    "instruction_title": "Instructions",
    "instruction_text": "This tool works by repeating a selected sets of characters, with the idea that after repeating it enough times, they will be stored in the long term memory.",
    "instruction_li_1": "Use the checkboxes to select the character sets you want to learn.",
    "instruction_li_2": "'Reverse mode' means you get 3 options and you have the select the correct option.",
    "instruction_li_3": "'Repeat' is how often you want to repeat all character sets that you have selected.",
    "instruction_li_4": "'Delay' is how long the answer is shown after the correct answer is given.",
    "h_set": "Hiragana sets",
    "k_set": "Katakana sets",
    "other_settings": "Other settings",
    "add": "Add",
    "add_all": "Add all",
    "reverse": "Reverse mode",
    "repeat": "Repeat",
    "delay": "Delay",
    "start": "Start",
    "continue": "Continue",
    "cancel": "cancel"
  },
  "sudoku": {
    "intro_title": "Sudoku solver",
    "intro_text": "Sudoku is a logic-based, combinatorial number-placement puzzle. The objective is to fill a 9×9 grid with digits so that each column, each row, and each of the nine 3×3 subgrids that compose the grid contains all of the digits from 1 to 9. The puzzle setter provides a partially completed grid, which for a well-posed puzzle has a single solution.\n\nI was solving puzzles while travelling, when I thought to myself \"I wonder how hard it would be to solve these puzzles programmatically\" and thus I created this solver tool.",
    "instruction_title": "Instructions",
    "instruction_li_1": "Click a cell to change its value by typing a number",
    "instruction_li_2": "Fill the field according to the puzzle you want to solve",
    "instruction_li_3": "Cells that are colored red, are in conflict with eachother",
    "instruction_li_4": "Press \"Solve\" to start solving",
    "instruction_li_5": "Press \"Clear\" to set all cells back to \"0\"",
    "solve": "Solve",
    "clear": "Clear"
  },
  "about": {
    "intro_title": "About this website",
    "intro_text": "Rather than a portfolio, this site is more meant as a playground for myself to test out whether some concepts I have are production ready or not. The clearest example of this is the Sudoku solver, as this is a concept I came up with while trying to solve Sudoku puzzels. Below you can find a list of the concepts, and a small explanation of them, that have been implemented on this website.",
    "ssr_title": "Server Sided Rendering (SSR)",
    "ssr_text_1": "As this website is set up with React as a Single Page Application (SPA), we need a way for search engines to be able to crawl this website properly. While Google is able to crawl the website regardless by executing the JavaScript, it is thought that Google scores such websites lower, the JavaScript capable Google crawler also seems to be indexing the website less frequents. Beside Google, very few crawlers, if any, seem to be able to execute JavaScript for crawler purposes, furthermore, the crawling seems to be a bit unreliable. Taking in regards all the above, we need a way to transform our React SPA to HTML without the need for the crawler to execute JavaScript.",
    "ssr_text_2": "This website has two containers running, one with Nginx and one with NodeJS. The NodeJS container is responsible for rendering the React to HTML, it does that by using the functionality provided by React. And in the cases we don't want some code to be execute on the backend or frontend, we inject certain environment variables into the build process. In the case of the frontend this means it will be considered as dead code and will never end up the bundled output. The Nginx container provides a caching layer on top of the NodeJS container, this as the server sided pages are static, thus we can reduce the load on the NodeJS container.",
    "code_title": "Code splitting",
    "code_text_1": "By default the output of the frontend build would be a single JavaScript bundle. This single bundle has a tendency of getting quite large for larger websites, which would be a disadvantage for the loading speed for let's say, the homepage (which might be the most important page). Since we want to optimize the amount of JavaScript loaded to the page, we would prefer to split the single bundle into several smaller bundles that can be loaded asynchronously.",
    "code_text_2": "To split up the JavaScript bundle the frontend is built through Parcel and uses the React.Lazy functionality.  In this case we split up the bundle for the 3rd party packages and per page theme (e.g.; Home, Sudoku, About, Kana).",
    "i18n_title": "Internationalization",
    "i18n_text": "As we want our website to be understood (with more ease) by people whos native language is not English, we would like to be able to provide translations of all texts on this website. In combination with the aforementioned code splitting, we have all texts in a JSON file per language, which will only be loaded when such language is requested (through the URL)."
  },
  "generic": {
    "read_more": "Read more"
  }
}